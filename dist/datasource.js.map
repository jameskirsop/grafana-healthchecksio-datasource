{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","id","q","withCredentials","jsonData","options","query","buildQueryParameters","targets","length","when","data","doRequest","method","then","mapToTable","result","_","map","checks","o","i","Object","keys","key","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","mapToTextValue","text","value","unique_key","datasourceRequest","filter","target","scopedVars","refId","hide","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    const jsonData = instanceSettings.jsonData;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    // query.targets = query.targets.filter(t => !t.hide);\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    // if (this.templateSrv.getAdhocFilters) {\n    //   query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    // } else {\n    //   query.adhocFilters = [];\n    // }\n\n    return this.doRequest({\n      url: 'api/datasources/proxy/${this.id}/checksroute',\n      method: 'GET'\n    }).then(result => this.mapToTable(result));\n  }\n\n  mapToTable(result) {\n    return {'data':[{\n      'columns':[\n        {\"text\":\"name\"},\n        {\"text\":\"tags\"},\n        {\"text\":\"Description\"},\n        {\n          \"text\":\"Grace\",\n          \"unit\":\"s\",\n        },\n        {\"text\":\"Total Number of Pings\"},\n        {\"text\":\"status\"},\n        {\n          \"text\":\"Last Ping\",\n          \"type\":\"time\",\n          \"sort\":true,\n          \"asc\":true,\n        },\n        {\n          \"text\":\"Next Ping\",\n          \"type\":\"time\",\n          \"sort\":true,\n          \"asc\":true,\n        },\n        {\"text\":\"unique_key\"},\n        {\"text\":\"schedule\"},\n        {\"text\":\"tz\"},\n      ],\n      'rows':_.map(result.data.checks,(o,i)=>{return Object.keys(o).map(function(key){\n          return o[key];\n        });}),\n      'type':'table',\n    }]}\n  }\n\n\n  testDatasource() {\n    return this.doRequest({\n      url: 'api/datasources/proxy/${this.id}/checksroute',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    // var interpolated = {\n    //     target: this.templateSrv.replace(query, null, 'regex')\n    // };\n\n    return this.doRequest({\n      url: 'api/datasources/proxy/${this.id}/checksroute',\n      method: 'GET',\n    }).then(result => this.mapToTextValue(result));\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data.checks, (o, i) => {\n      return {text: o.name, value: o.unique_key};\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    // options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}