{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","id","q","withCredentials","jsonData","options","query","buildQueryParameters","console","log","targets","filter","t","hide","length","when","data","getAdhocFilters","adhocFilters","customDoRequest","method","then","mapToTable","result","_","map","checks","o","i","Object","keys","key","doRequest","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","mapToTextValue","datasourceRequest","target","unique_key","scopedVars","refId","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    const jsonData = instanceSettings.jsonData;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    console.log(query.targets)\n    query.targets = query.targets.filter(t => !t.hide);\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    return this.customDoRequest({\n      url: `api/datasources/proxy/${this.id}/checksroute`,\n      method: 'GET',\n      data: query,\n    }).then(result => this.mapToTable(result));\n  }\n\n  mapToTable(result) {\n    return {'data':[{\n      'columns':[\n        {\"text\":\"name\"},\n        {\"text\":\"tags\"},\n        {\"text\":\"Description\"},\n        {\n          \"text\":\"Grace\",\n          \"unit\":\"s\",\n        },\n        {\"text\":\"Total Number of Pings\"},\n        {\"text\":\"status\"},\n        {\n          \"text\":\"Last Ping\",\n          \"type\":\"time\",\n          \"sort\":true,\n          \"asc\":true,\n        },\n        {\n          \"text\":\"Next Ping\",\n          \"type\":\"time\",\n          \"sort\":true,\n          \"asc\":true,\n        },\n        {\"text\":\"unique_key\"},\n        {\"text\":\"schedule\"},\n        {\"text\":\"tz\"},\n      ],\n      'rows':_.map(result.data.checks,(o,i)=>{return Object.keys(o).map(function(key){\n          return o[key];\n        });}),\n      'type':'table',\n    }]}\n  }\n\n\n  testDatasource() {\n    return this.doRequest({\n      url: `api/datasources/proxy/${this.id}/checksroute`,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: `api/datasources/proxy/${this.id}/checksroute`,\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    // var interpolated = {\n    //     target: this.templateSrv.replace(query, null, 'regex')\n    // };\n\n    return this.doRequest({\n      url: `api/datasources/proxy/${this.id}/checksroute`,\n      method: 'GET',\n    }).then(result => this.mapToTextValue(result));\n  }\n\n  mapToTextValue(result) {\n    // console.log(result.data)\n    return _.map(result.data.checks, (o, i) => {\n        // return {text: o.name, value: o.unique_key};\n        return o.name;\n    });\n    // b = [{text:'',value:null}].concat(a)\n    // console.log(b)\n\n    // return b\n  }\n\n  doRequest(options) {\n    // console.log('Do Request options:')\n    // console.log(options)\n    options.withCredentials = this.withCredentials;\n    // options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  customDoRequest(options){\n    console.log('Custom Request:')\n    console.log(options)\n\n    return this.backendSrv.datasourceRequest(options).then(response => {\n      if (options.data.targets.length == 1){\n        console.log('Target Response!')\n        console.log(response)\n        response.data.checks = _.filter(\n          response.data.checks,\n          (o,i) => {\n            return options.data.targets[0].target == o.unique_key;\n          });\n      }\n      return response\n    });\n\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}