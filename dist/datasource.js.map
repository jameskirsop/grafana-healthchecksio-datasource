{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","id","q","withCredentials","jsonData","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","mode","queryUrl","uuid","console","log","customDoRequest","method","then","mapToTable","result","catch","error","status","title","message","processingArray","checks","_","map","flips","o","i","Object","keys","key","hasOwnProperty","x","doRequest","response","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","mapResultToList","code","unique_key","datasourceRequest","additionalData","target","check","scopedVars","refId","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    const jsonData = instanceSettings.jsonData;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    switch (query.targets[0].mode) {\n      case 2:\n        var queryUrl = `api/datasources/proxy/${this.id}/checksroute/${query.targets[0].uuid}/flips/`\n        break;    \n      default:\n        var queryUrl = `api/datasources/proxy/${this.id}/checksroute/${query.targets[0].uuid}`\n        break;\n    }\n    console.log('Mode'+query.targets[0].mode)\n    return this.customDoRequest({\n      url: queryUrl,\n      method: 'GET',\n    },query).then(\n      result => {\n        return this.mapToTable(result, query.targets[0].mode)}\n    ).catch(\n      error => {\n        console.log(error);\n        if (error.status == 404){\n          return {\n            status: \"error\",\n            title: \"Connection failed\",\n            message: \"Connection failed: \" + error.data.message\n          };\n        }\n      });\n  }\n\n  mapToTable(result, mode) {\n    var processingArray = result.data.checks;\n    if (mode == 2){\n      return {'data':[{\n        'columns':[\n          {\"text\":\"time\",\"type\":\"time\"},\n          {\"status\":\"text\"},\n        ],'rows':_.map(result.data.flips,(o,i)=>{return Object.keys(o).map(function(key){return o[key];});})}]}\n    } else if(mode == 1){\n      processingArray = [result.data,];\n      if (result.data.hasOwnProperty('checks')){\n        processingArray = []\n      }\n    }\n    return {'data':[{\n      'columns':[\n        {\"text\":\"name\"},\n        {\"text\":\"tags\"},\n        {\"text\":\"Description\"},\n        {\n          \"text\":\"Grace\",\n          \"unit\":\"s\",\n        },\n        {\"text\":\"Total Number of Pings\"},\n        {\"text\":\"status\"},\n        {\n          \"text\":\"Last Ping\",\n          \"type\":\"time\",\n          \"sort\":true,\n          \"asc\":true,\n        },\n        {\n          \"text\":\"Next Ping\",\n          \"type\":\"time\",\n          \"sort\":true,\n          \"asc\":true,\n        },\n        {\"text\":\"manual_resume\"},\n        {\"text\":\"unique_key\"},\n        {\"text\":\"schedule\"},\n        {\"text\":\"tz\"},\n      ],\n      'rows':_.map(processingArray,(o,i)=>{return Object.keys(o).map(function(key){\n          if(key == 'status'){\n            let x = {\"down\": 0,\n              \"grace\": 1,\n              \"started\": 2,\n              \"paused\": 3,\n              \"new\": 4,\n              \"up\": 5\n            }\n            return x[o[key]]\n          }\n          return o[key];\n        });}),\n      'type':'table',\n    }]}\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: `api/datasources/proxy/${this.id}/checksroute`,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: `api/datasources/proxy/${this.id}/checksroute`,\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    return this.doRequest({\n      url: `api/datasources/proxy/${this.id}/checksroute`,\n      method: 'GET',\n    }).then(result => this.mapResultToList(result));\n  }\n\n  mapResultToList(result) {\n    return _.map(result.data.checks, (o, i) => {\n        return {name: o.name, code: o.unique_key};\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  customDoRequest(options,additionalData){\n    return this.backendSrv.datasourceRequest(options).then(response => {\n      if (additionalData.targets.length == 1){\n        if (additionalData.targets[0].target === \"\"){\n          response.data.checks = response.data.checks\n        } else {\n          // We should never get here now because we're returned a filtered result\n        }\n      }\n      return response\n    });\n\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.check !== 'Select Check';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        check: this.templateSrv.replace(target.check, options.scopedVars, 'regex'),\n        refId: target.refId,\n        mode: target.mode,\n        hide: target.hide,\n        uuid: target.uuid,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}