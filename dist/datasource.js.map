{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","id","q","withCredentials","jsonData","options","console","log","query","buildQueryParameters","targets","filter","t","hide","length","when","data","customDoRequest","target","method","then","mapToTable","result","mode","catch","error","status","title","message","processingArray","checks","hasOwnProperty","_","map","o","i","Object","keys","key","doRequest","response","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","mapToTextValue","datasourceRequest","scopedVars","refId","Promise","resolve","reject"],"mappings":";;;;;;;;;AAAA;;;;;;;;IAEaA,iB,WAAAA,iB;AAEX,6BAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,SAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,SAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,SAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,SAAKC,EAAL,GAAUP,iBAAiBO,EAA3B;AACA,SAAKC,CAAL,GAASP,EAAT;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKM,eAAL,GAAuBT,iBAAiBS,eAAxC;AACA,QAAMC,WAAWV,iBAAiBU,QAAlC;AACD;;;;0BAEKC,O,EAAS;AAAA;;AACbC,cAAQC,GAAR,CAAY,SAAZ;AACAD,cAAQC,GAAR,CAAYF,OAAZ;AACA,UAAIG,QAAQ,KAAKC,oBAAL,CAA0BJ,OAA1B,CAAZ;AACAC,cAAQC,GAAR,CAAY,OAAZ;AACAD,cAAQC,GAAR,CAAYC,KAAZ;AACAA,YAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,eAAK,CAACC,EAAEC,IAAR;AAAA,OAArB,CAAhB;AACA,UAAIL,MAAME,OAAN,CAAcI,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,eAAO,KAAKZ,CAAL,CAAOa,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED,aAAO,KAAKC,eAAL,CAAqB;AAC1BlB,wCAA8B,KAAKE,EAAnC,qBAAqDO,MAAME,OAAN,CAAc,CAAd,EAAiBQ,MAD5C;AAE1BC,gBAAQ,KAFkB;AAG1BH,cAAMR;AAHoB,OAArB,EAIJY,IAJI,CAKL;AAAA,eAAU,MAAKC,UAAL,CAAgBC,MAAhB,EAAwBd,MAAME,OAAN,CAAc,CAAd,EAAiBa,IAAzC,CAAV;AAAA,OALK,EAMLC,KANK,CAOL,iBAAS;AACP,YAAIC,MAAMC,MAAN,IAAgB,GAApB,EAAwB;AACtB,iBAAO;AACLA,oBAAQ,OADH;AAELC,mBAAO,mBAFF;AAGLC,qBAAS,wBAAwBH,MAAMT,IAAN,CAAWY;AAHvC,WAAP;AAKD;AACF,OAfI,CAAP;AAgBA;AACA;AACA;AACA;AACA;AAED;;;+BAEUN,M,EAAQC,I,EAAM;AACvBjB,cAAQC,GAAR,CAAY,qBAAZ;AACAD,cAAQC,GAAR,CAAYe,MAAZ;AACAhB,cAAQC,GAAR,CAAYgB,IAAZ;AACA,UAAIM,kBAAkBP,OAAON,IAAP,CAAYc,MAAlC;AACA,UAAIP,QAAQ,CAAZ,EAAc;AACZM,0BAAkB,CAACP,OAAON,IAAR,CAAlB;AACA,YAAIM,OAAON,IAAP,CAAYe,cAAZ,CAA2B,QAA3B,CAAJ,EAAyC;AACvCF,4BAAkB,EAAlB;AACD;AACF;AACD,aAAO,EAAC,QAAO,CAAC;AACd,qBAAU,CACR,EAAC,QAAO,MAAR,EADQ,EAER,EAAC,QAAO,MAAR,EAFQ,EAGR,EAAC,QAAO,aAAR,EAHQ,EAIR;AACE,oBAAO,OADT;AAEE,oBAAO;AAFT,WAJQ,EAQR,EAAC,QAAO,uBAAR,EARQ,EASR,EAAC,QAAO,QAAR,EATQ,EAUR,EAAC,QAAO,aAAR,EAVQ,EAWR;AACE,oBAAO,WADT;AAEE,oBAAO,MAFT;AAGE,oBAAO,IAHT;AAIE,mBAAM;AAJR,WAXQ,EAiBR;AACE,oBAAO,WADT;AAEE,oBAAO,MAFT;AAGE,oBAAO,IAHT;AAIE,mBAAM;AAJR,WAjBQ,EAuBR,EAAC,QAAO,YAAR,EAvBQ,EAwBR,EAAC,QAAO,UAAR,EAxBQ,EAyBR,EAAC,QAAO,IAAR,EAzBQ,CADI;AA4Bd,kBAAOG,iBAAEC,GAAF,CAAMJ,eAAN,EAAsB,UAACK,CAAD,EAAGC,CAAH,EAAO;AAAC,mBAAOC,OAAOC,IAAP,CAAYH,CAAZ,EAAeD,GAAf,CAAmB,UAASK,GAAT,EAAa;AACxE,qBAAOJ,EAAEI,GAAF,CAAP;AACD,aAFyC,CAAP;AAE/B,WAFC,CA5BO;AA+Bd,kBAAO;AA/BO,SAAD,CAAR,EAAP;AAiCD;;;qCAEgB;AACf,aAAO,KAAKC,SAAL,CAAe;AACpBxC,wCAA8B,KAAKE,EAAnC,iBADoB;AAEpBkB,gBAAQ;AAFY,OAAf,EAGJC,IAHI,CAGC,oBAAY;AAClB,YAAIoB,SAASd,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,iBAAO,EAAEA,QAAQ,SAAV,EAAqBE,SAAS,wBAA9B,EAAwDD,OAAO,SAA/D,EAAP;AACD;AACF,OAPM,CAAP;AAQD;;;oCAEetB,O,EAAS;AACvB,UAAIG,QAAQ,KAAKX,WAAL,CAAiB4C,OAAjB,CAAyBpC,QAAQqC,UAAR,CAAmBlC,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAZ;AACA,UAAImC,kBAAkB;AACpBC,eAAOvC,QAAQuC,KADK;AAEpBF,oBAAY;AACV1C,gBAAMK,QAAQqC,UAAR,CAAmB1C,IADf;AAEV6C,sBAAYxC,QAAQqC,UAAR,CAAmBG,UAFrB;AAGVC,kBAAQzC,QAAQqC,UAAR,CAAmBI,MAHjB;AAIVC,qBAAW1C,QAAQqC,UAAR,CAAmBK,SAJpB;AAKVvC,iBAAOA;AALG,SAFQ;AASpBwC,kBAAU3C,QAAQ2C;AATE,OAAtB;;AAYA,aAAO,KAAKT,SAAL,CAAe;AACpBxC,wCAA8B,KAAKE,EAAnC,iBADoB;AAEpBkB,gBAAQ,MAFY;AAGpBH,cAAM2B;AAHc,OAAf,EAIJvB,IAJI,CAIC,kBAAU;AAChB,eAAOE,OAAON,IAAd;AACD,OANM,CAAP;AAOD;;;oCAEeR,K,EAAO;AAAA;;AACrB,aAAO,KAAK+B,SAAL,CAAe;AACpBxC,wCAA8B,KAAKE,EAAnC,iBADoB;AAEpBkB,gBAAQ;AAFY,OAAf,EAGJC,IAHI,CAGC;AAAA,eAAU,OAAK6B,cAAL,CAAoB3B,MAApB,CAAV;AAAA,OAHD,CAAP;AAID;;;mCAEcA,M,EAAQ;AACrB,aAAOU,iBAAEC,GAAF,CAAMX,OAAON,IAAP,CAAYc,MAAlB,EAA0B,UAACI,CAAD,EAAIC,CAAJ,EAAU;AACvC,eAAOD,EAAElC,IAAT;AACH,OAFM,CAAP;AAGD;;;8BAESK,O,EAAS;AACjBA,cAAQF,eAAR,GAA0B,KAAKA,eAA/B;AACA,aAAO,KAAKP,UAAL,CAAgBsD,iBAAhB,CAAkC7C,OAAlC,CAAP;AACD;;;oCAEeA,O,EAAQ;AACtB,aAAO,KAAKT,UAAL,CAAgBsD,iBAAhB,CAAkC7C,OAAlC,EAA2Ce,IAA3C,CAAgD,oBAAY;AACjE,YAAIf,QAAQW,IAAR,CAAaN,OAAb,CAAqBI,MAArB,IAA+B,CAAnC,EAAqC;AACnC,cAAIT,QAAQW,IAAR,CAAaN,OAAb,CAAqB,CAArB,EAAwBQ,MAAxB,KAAmC,EAAvC,EAA0C;AACxCsB,qBAASxB,IAAT,CAAcc,MAAd,GAAuBU,SAASxB,IAAT,CAAcc,MAArC;AACD,WAFD,MAEO;AACL;AACD;AACF;AACD,eAAOU,QAAP;AACD,OATM,CAAP;AAWD;;;yCAEoBnC,O,EAAS;AAAA;;AAC5B;AACAA,cAAQK,OAAR,GAAkBsB,iBAAErB,MAAF,CAASN,QAAQK,OAAjB,EAA0B,kBAAU;AACpD,eAAOQ,OAAOA,MAAP,KAAkB,eAAzB;AACD,OAFiB,CAAlB;;AAIA,UAAIR,UAAUsB,iBAAEC,GAAF,CAAM5B,QAAQK,OAAd,EAAuB,kBAAU;AAC7C,eAAO;AACLQ,kBAAQ,OAAKrB,WAAL,CAAiB4C,OAAjB,CAAyBvB,OAAOA,MAAhC,EAAwCb,QAAQ8C,UAAhD,EAA4D,OAA5D,CADH;AAELC,iBAAOlC,OAAOkC,KAFT;AAGL7B,gBAAML,OAAOK,IAHR;AAILV,gBAAMK,OAAOL,IAJR;AAKLf,gBAAMoB,OAAOpB,IAAP,IAAe;AALhB,SAAP;AAOD,OARa,CAAd;;AAUAO,cAAQK,OAAR,GAAkBA,OAAlB;;AAEA,aAAOL,OAAP;AACD;;;+BAEUA,O,EAAS;AAAA;;AAClB,aAAO,IAAIgD,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKhB,SAAL,CAAe;AACbxC,eAAK,OAAKA,GAAL,GAAW,WADH;AAEboB,kBAAQ,MAFK;AAGbH,gBAAMX;AAHO,SAAf,EAIGe,IAJH,CAIQ,kBAAU;AAChB,iBAAOkC,QAAQhC,OAAON,IAAf,CAAP;AACD,SAND;AAOD,OARM,CAAP;AASD;;;iCAEYX,O,EAAS;AAAA;;AACpB,aAAO,IAAIgD,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKhB,SAAL,CAAe;AACbxC,eAAK,OAAKA,GAAL,GAAW,aADH;AAEboB,kBAAQ,MAFK;AAGbH,gBAAMX;AAHO,SAAf,EAIGe,IAJH,CAIQ,kBAAU;AAChB,iBAAOkC,QAAQhC,OAAON,IAAf,CAAP;AACD,SAND;AAOD,OARM,CAAP;AASD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    const jsonData = instanceSettings.jsonData;\n  }\n\n  query(options) {\n    console.log('Options')\n    console.log(options)\n    var query = this.buildQueryParameters(options);\n    console.log('Query')\n    console.log(query)\n    query.targets = query.targets.filter(t => !t.hide);\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.customDoRequest({\n      url: `api/datasources/proxy/${this.id}/checksroute/${query.targets[0].target}`,\n      method: 'GET',\n      data: query,\n    }).then(\n      result => this.mapToTable(result, query.targets[0].mode)\n    ).catch(\n      error => {\n        if (error.status == 404){\n          return {\n            status: \"error\",\n            title: \"Connection failed\",\n            message: \"Connection failed: \" + error.data.message\n          };\n        }\n      });\n    // if (this.templateSrv.getAdhocFilters) {\n    //   query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    // } else {\n    //   query.adhocFilters = [];\n    // }\n\n  }\n\n  mapToTable(result, mode) {\n    console.log('Map to Table Result');\n    console.log(result);\n    console.log(mode);\n    var processingArray = result.data.checks;\n    if (mode == 1){\n      processingArray = [result.data,];\n      if (result.data.hasOwnProperty('checks')){\n        processingArray = []\n      }\n    }\n    return {'data':[{\n      'columns':[\n        {\"text\":\"name\"},\n        {\"text\":\"tags\"},\n        {\"text\":\"Description\"},\n        {\n          \"text\":\"Grace\",\n          \"unit\":\"s\",\n        },\n        {\"text\":\"Total Number of Pings\"},\n        {\"text\":\"status\"},\n        {\"text\":\"Status Code\"},\n        {\n          \"text\":\"Last Ping\",\n          \"type\":\"time\",\n          \"sort\":true,\n          \"asc\":true,\n        },\n        {\n          \"text\":\"Next Ping\",\n          \"type\":\"time\",\n          \"sort\":true,\n          \"asc\":true,\n        },\n        {\"text\":\"unique_key\"},\n        {\"text\":\"schedule\"},\n        {\"text\":\"tz\"},\n      ],\n      'rows':_.map(processingArray,(o,i)=>{return Object.keys(o).map(function(key){\n          return o[key];\n        });}),\n      'type':'table',\n    }]}\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: `api/datasources/proxy/${this.id}/checksroute`,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: `api/datasources/proxy/${this.id}/checksroute`,\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    return this.doRequest({\n      url: `api/datasources/proxy/${this.id}/checksroute`,\n      method: 'GET',\n    }).then(result => this.mapToTextValue(result));\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data.checks, (o, i) => {\n        return o.name;\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  customDoRequest(options){\n    return this.backendSrv.datasourceRequest(options).then(response => {\n      if (options.data.targets.length == 1){\n        if (options.data.targets[0].target === \"\"){\n          response.data.checks = response.data.checks\n        } else {\n          // We should never get here now because we're returned a filtered result\n        }\n      }\n      return response\n    });\n\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        mode: target.mode,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}