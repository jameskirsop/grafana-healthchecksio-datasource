{"version":3,"sources":["../src/query_ctrl.js"],"names":["MODE_SUMMARY","MODE_SINGLE","GenericDatasourceQueryCtrl","$scope","$injector","scope","target","type","resultsModes","value","text","mode","resultsMode","SUMMARY","SINGLE","init","targetDefaults","_","defaults","getSuggestions","bind","getOptions","query","console","log","result","datasource","metricFindQuery","then","a","forEach","push","item","rawQuery","panelCtrl","refresh","newTarget","cloneDeep","isEqual","oldTarget","QueryCtrl","templateUrl"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;AAEO,IAAMA,sCAAe,CAArB;AACA,IAAMC,oCAAc,CAApB;;IAEMC,0B,WAAAA,0B;;;AAEX,sCAAYC,MAAZ,EAAoBC,SAApB,EAAiC;AAAA;;AAAA,wJACzBD,MADyB,EACjBC,SADiB;;AAG/B,UAAKC,KAAL,GAAaF,MAAb;AACA;AACA,UAAKG,MAAL,CAAYC,IAAZ,GAAmB,MAAKD,MAAL,CAAYC,IAAZ,IAAoB,OAAvC;;AAEA,UAAKC,YAAL,GAAoB,CAClB,EAACC,OAAO,KAAR,EAAqBC,MAAM,SAA3B,EAA0CC,MAAMX,YAAhD,EADkB,EAElB,EAACS,OAAO,QAAR,EAAuBC,MAAM,QAA7B,EAA8CC,MAAMV,WAApD,EAFkB,CAApB;;AAKA,UAAKE,MAAL,CAAYS,WAAZ,GAA0B;AACxBC,eAASb,YADe;AAExBc,cAAQb;AAFgB,KAA1B;;AAKA,UAAKc,IAAL,GAAY,YAAW;AACrB,UAAIT,SAAS,KAAKA,MAAlB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAIU,iBAAiB;AACnB,gBAAQhB;AADW,OAArB;AAGAiB,QAAEC,QAAF,CAAWZ,MAAX,EAAmBU,cAAnB;;AAEA,UAAI,KAAKV,MAAL,CAAYK,IAAZ,IAAoBX,YAAxB,EAAsC;AACpC,aAAKM,MAAL,CAAYA,MAAZ,GAAqB,EAArB;AACD;AACF,KAnBD;AAoBA,UAAKS,IAAL;AACA;AACA,UAAKI,cAAL,GAAsBF,EAAEG,IAAF,CAAO,MAAKC,UAAZ,QAAtB;AAvC+B;AAwChC;;;;+BAEUC,K,EAAO;AAChBC,cAAQC,GAAR,CAAY,iBAAZ;AACA,UAAIC,SAAS,EAAb;AACA,WAAKC,UAAL,CAAgBC,eAAhB,CAAgCL,SAAS,EAAzC,EAA6CM,IAA7C,CAAkD,aAAK;AACrDL,gBAAQC,GAAR,CAAYK,CAAZ;AACAA,UAAEC,OAAF,CAAU;AAAA,iBAAQL,OAAOM,IAAP,CAAYC,IAAZ,CAAR;AAAA,SAAV;AACD,OAHD;AAIAT,cAAQC,GAAR,CAAYC,MAAZ;AACA,aAAOA,MAAP;AACD;;AAED;AACA;AACA;AACA;AACA;;;;uCAEmB;AACjB,WAAKnB,MAAL,CAAY2B,QAAZ,GAAuB,CAAC,KAAK3B,MAAL,CAAY2B,QAApC;AACD;;;uCAEkB;AACjB,WAAKC,SAAL,CAAeC,OAAf,GADiB,CACS;AAC3B;;;mCAEc;AACb,UAAIC,YAAYnB,EAAEoB,SAAF,CAAY,KAAK/B,MAAjB,CAAhB;AACA,UAAI,CAACW,EAAEqB,OAAF,CAAU,KAAKC,SAAf,EAA0B,KAAKjC,MAA/B,CAAL,EAA6C;AAC3C,aAAKiC,SAAL,GAAiBH,SAAjB;AACA;AACA,aAAKF,SAAL,CAAeC,OAAf;AACD;AACF;;;sCAEiBxB,I,EAAK;AACrBY,cAAQC,GAAR,CAAYb,IAAZ;AACA,WAAKL,MAAL,CAAYK,IAAZ,GAAmBA,IAAnB;AACA,WAAKI,IAAL;AACA,WAAKmB,SAAL,CAAeC,OAAf;AACA;AACD;;;;EApF6CK,c;;AAsFhDtC,2BAA2BuC,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport const MODE_SUMMARY = 0;\nexport const MODE_SINGLE = 1;\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector,)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    // this.target.target = this.target.target || 'Select Check';\n    this.target.type = this.target.type || 'table';\n\n    this.resultsModes = [\n      {value: 'sum',       text: 'Summary',     mode: MODE_SUMMARY},\n      {value: 'single',      text: 'Single',        mode: MODE_SINGLE},\n    ];\n    \n    this.$scope.resultsMode = {\n      SUMMARY: MODE_SUMMARY,\n      SINGLE: MODE_SINGLE,\n    };\n    \n    this.init = function() {\n      var target = this.target;\n\n      // var scopeDefaults = {\n      //   metric: {},\n      //   oldTarget: _.cloneDeep(this.target),\n      //   queryOptionsText: this.renderQueryOptionsText()\n      // };\n      // _.defaults(this, scopeDefaults);\n\n      // Load default values\n      var targetDefaults = {\n        'mode': MODE_SUMMARY,\n      };\n      _.defaults(target, targetDefaults);\n\n      if (this.target.mode == MODE_SUMMARY) {\n        this.target.target = ''\n      }\n    };\n    this.init();\n    // this.results = this.datasource.metricFindQuery(query || '');\n    this.getSuggestions = _.bind(this.getOptions, this)\n  }\n\n  getOptions(query) {\n    console.log('Getting options')\n    let result = []; \n    this.datasource.metricFindQuery(query || '').then(a => {\n      console.log(a)\n      a.forEach(item => result.push(item));\n    });\n    console.log(result);\n    return result\n  }\n\n  // getTextValues(metricFindResult) {\n  //   return _.map(metricFindResult, value => {\n  //     return value.text;\n  //   });\n  // }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  onTargetBlur() {\n    var newTarget = _.cloneDeep(this.target);\n    if (!_.isEqual(this.oldTarget, this.target)) {\n      this.oldTarget = newTarget;\n      // this.targetChanged();\n      this.panelCtrl.refresh();\n    }\n  }\n\n  switchResultsMode(mode){\n    console.log(mode)\n    this.target.mode = mode;\n    this.init()\n    this.panelCtrl.refresh();\n    // console.log(this.resultsMode)\n  }\n}\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}